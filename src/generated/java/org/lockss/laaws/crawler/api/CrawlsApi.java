/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.lockss.laaws.crawler.api;

import org.lockss.laaws.crawler.model.CrawlRequest;
import org.lockss.laaws.crawler.model.CrawlStatus;
import org.lockss.laaws.crawler.model.ErrorPager;
import org.lockss.laaws.crawler.model.JobPager;
import org.lockss.laaws.crawler.model.UrlPager;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Api(value = "crawls", description = "the crawls API")
public interface CrawlsApi extends org.lockss.spring.status.SpringLockssBaseApi {

    CrawlsApiDelegate getDelegate();

    @ApiOperation(value = "Request a crawl using a descriptor", nickname = "addCrawl", notes = "Use the information found in the descriptor object to initiate a crawl.", response = CrawlRequest.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "crawls", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "The crawl request has been queued for operation.", response = CrawlRequest.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/crawls/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CrawlRequest> addCrawl(@ApiParam(value = "" ,required=true )  @Valid @RequestBody CrawlRequest body) {
        return getDelegate().addCrawl(body);
    }


    @ApiOperation(value = "Remove or stop a crawl", nickname = "deleteCrawlById", notes = "Delete a crawl given the crawl identifier, stopping any current processing, if necessary", response = CrawlRequest.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "crawls", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The deleted crawl", response = CrawlRequest.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/crawls/{jobId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<CrawlRequest> deleteCrawlById(@ApiParam(value = "identifier used to identify a specific crawl.",required=true) @PathVariable("jobId") Integer jobId) {
        return getDelegate().deleteCrawlById(jobId);
    }


    @ApiOperation(value = "Delete all of the currently queued and active crawl requests", nickname = "deleteCrawls", notes = "Halt and delete all of the currently queued and active crawls", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "crawls", })
    @ApiResponses(value = { 
        @ApiResponse(code = 501, message = "Not Implemented.") })
    @RequestMapping(value = "/crawls/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteCrawls(@NotNull @ApiParam(value = "The crawl id", required = true) @Valid @RequestParam(value = "id", required = true) String id) {
        return getDelegate().deleteCrawls(id);
    }


    @ApiOperation(value = "Get the crawl info for this job", nickname = "getCrawlById", notes = "Get the job represented by this crawl id", response = CrawlStatus.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "crawls", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The crawl status of the requested crawl", response = CrawlStatus.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/crawls/{jobId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CrawlStatus> getCrawlById(@ApiParam(value = "identifier used to identify a specific crawl.",required=true) @PathVariable("jobId") Integer jobId) {
        return getDelegate().getCrawlById(jobId);
    }


    @ApiOperation(value = "A pagable list of errored urls.", nickname = "getCrawlErrored", notes = "Get a list of errored urls.", response = ErrorPager.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "crawls", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The requested errored urls.", response = ErrorPager.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 409, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/crawls/{jobId}/errored",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ErrorPager> getCrawlErrored(@ApiParam(value = "",required=true) @PathVariable("jobId") Integer jobId,@ApiParam(value = "\"The continuation token of the next page of jobs to be returned.\"") @Valid @RequestParam(value = "continuationToken", required = false) String continuationToken,@ApiParam(value = "The number of jobs per page.") @Valid @RequestParam(value = "limit", required = false) Integer limit) {
        return getDelegate().getCrawlErrored(jobId, continuationToken, limit);
    }


    @ApiOperation(value = "A pagable list of excluded urls.", nickname = "getCrawlExcluded", notes = "Get a list of excluded urls.", response = UrlPager.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "crawls", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The requested excluded urls.", response = UrlPager.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 409, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/crawls/{jobId}/excluded",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UrlPager> getCrawlExcluded(@ApiParam(value = "identifier used to identify a specific crawl.",required=true) @PathVariable("jobId") Integer jobId,@ApiParam(value = "\"The continuation token of the next page of jobs to be returned.\"") @Valid @RequestParam(value = "continuationToken", required = false) String continuationToken,@ApiParam(value = "The number of jobs per page.") @Valid @RequestParam(value = "limit", required = false) Integer limit) {
        return getDelegate().getCrawlExcluded(jobId, continuationToken, limit);
    }


    @ApiOperation(value = "A pagable list of fetched urls.", nickname = "getCrawlFetched", notes = "Get a list of fetched urls.", response = UrlPager.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "crawls", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The requested fetched urls.", response = UrlPager.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 409, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/crawls/{jobId}/fetched",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UrlPager> getCrawlFetched(@ApiParam(value = "",required=true) @PathVariable("jobId") Integer jobId,@ApiParam(value = "\"The continuation token of the next page of jobs to be returned.\"") @Valid @RequestParam(value = "continuationToken", required = false) String continuationToken,@ApiParam(value = "The number of jobs per page.") @Valid @RequestParam(value = "limit", required = false) Integer limit) {
        return getDelegate().getCrawlFetched(jobId, continuationToken, limit);
    }


    @ApiOperation(value = "A pagable list of notMotified urls.", nickname = "getCrawlNotModified", notes = "Get a list of notMotified urls.", response = UrlPager.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "crawls", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The requested notMotified urls.", response = UrlPager.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 409, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/crawls/{jobId}/notMotified",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UrlPager> getCrawlNotModified(@ApiParam(value = "",required=true) @PathVariable("jobId") Integer jobId,@ApiParam(value = "\"The continuation token of the next page of jobs to be returned.\"") @Valid @RequestParam(value = "continuationToken", required = false) String continuationToken,@ApiParam(value = "The number of jobs per page.") @Valid @RequestParam(value = "limit", required = false) Integer limit) {
        return getDelegate().getCrawlNotModified(jobId, continuationToken, limit);
    }


    @ApiOperation(value = "A pagable list of parsed urls.", nickname = "getCrawlParsed", notes = "Get a list of parsed urls.", response = UrlPager.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "crawls", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The requested modified urls.", response = UrlPager.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 409, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/crawls/{jobId}/parsed",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UrlPager> getCrawlParsed(@ApiParam(value = "",required=true) @PathVariable("jobId") Integer jobId,@ApiParam(value = "\"The continuation token of the next page of jobs to be returned.\"") @Valid @RequestParam(value = "continuationToken", required = false) String continuationToken,@ApiParam(value = "The number of jobs per page.") @Valid @RequestParam(value = "limit", required = false) Integer limit) {
        return getDelegate().getCrawlParsed(jobId, continuationToken, limit);
    }


    @ApiOperation(value = "A pagable list of pending urls.", nickname = "getCrawlPending", notes = "Get a list of pending urls.", response = UrlPager.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "crawls", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The requested modified urls.", response = UrlPager.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 409, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/crawls/{jobId}/pending",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UrlPager> getCrawlPending(@ApiParam(value = "",required=true) @PathVariable("jobId") Integer jobId,@ApiParam(value = "\"The continuation token of the next page of jobs to be returned.\"") @Valid @RequestParam(value = "continuationToken", required = false) String continuationToken,@ApiParam(value = "The number of jobs per page.") @Valid @RequestParam(value = "limit", required = false) Integer limit) {
        return getDelegate().getCrawlPending(jobId, continuationToken, limit);
    }


    @ApiOperation(value = "Get a list of active crawls.", nickname = "getCrawls", notes = "Get a list of all currently active crawls or a pageful of the list defined by the continuation token and size", response = JobPager.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "crawls", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The requested crawls", response = JobPager.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/crawls/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<JobPager> getCrawls(@ApiParam(value = "The number of jobs per page") @Valid @RequestParam(value = "limit", required = false) Integer limit,@ApiParam(value = "The continuation token of the next page of jobs to be returned.") @Valid @RequestParam(value = "continuationToken", required = false) String continuationToken) {
        return getDelegate().getCrawls(limit, continuationToken);
    }


    @Override
    default ResponseEntity<org.lockss.laaws.status.model.ApiStatus> getStatus() {
      return getDelegate().getStatus();
    }
}
